<?xml version="1.0" encoding="iso-8859-1"?>
<!-- This stylesheets transforms OmDoc into LaTeX input
     Initial Version: Michael Kohlhase 1999-09-07
     URL: http://www.mathweb.org/omdoc/xsl/omdoc2tex.dtd
     Comments are welcome! (send mail to kohlhase@mathweb.org)
     See the documentation and examples at http://www.mathweb.org/omdoc
     (c) 1999, 2000 Michael Kohlhase, released under the GNU Public License
 -->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:om="http://www.openmath.org/OpenMath"
  xmlns:dc="http://purl.org/DC"
  xmlns="http://www.mathweb.org/omdoc"
  version="1.0">  

<xsl:import href="omdoc2share.xsl"/>

<xsl:strip-space  elements = "*"/> 
<xsl:output method="text"/>


<xsl:template match="text()">
  <xsl:call-template name="safe">
    <xsl:with-param name="string" select="."/>
  </xsl:call-template>
</xsl:template>

<!-- The root: Get the title and apply the omdoc-template -->
<xsl:template match="/">
  <xsl:text>%%% This file is automatically generated, from an OMDoc,&#xA;</xsl:text>
  <xsl:text>%%% by the XSL style sheet omdoc2tex.xsl do not edit!&#xA;</xsl:text>
  <xsl:text>%%% for information about OMDoc, see http://www.mathweb.org/omdoc&#xA;&#xA;</xsl:text>
  <xsl:text>\documentclass{article}&#xA;</xsl:text>
  <xsl:text>\usepackage{omdoc}&#xA;</xsl:text>
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="omdoc">
  <xsl:text>\title{</xsl:text>
    <xsl:value-of select="metadata/dc:Title"/>
  <xsl:text>}&#xA;</xsl:text>

  <xsl:text>\author{</xsl:text>
    <xsl:for-each select="metadata/dc:Creator">
       <xsl:apply-templates/>
       <xsl:if test="position()!=last()"><xsl:text>, </xsl:text></xsl:if>
    </xsl:for-each>	
  <xsl:text>}&#xA;</xsl:text>

  <xsl:text>\date{</xsl:text>
    <xsl:value-of select="metadata/dc:Date"/>
  <xsl:text>}&#xA;</xsl:text>
  
  <xsl:text>\begin{document}&#xA;</xsl:text>
  <xsl:text>\maketitle&#xA;</xsl:text>
  <xsl:apply-templates/>
  <xsl:text>\end{document}&#xA;</xsl:text>
</xsl:template>

<xsl:template match="omgroup"/>

<!--<xsl:template match="omgroup[@type='sequence']">
  <xsl:call-template name="do-begin-list"/>
  <xsl:for-each select="omtext">
    <xsl:call-template name="do-begin-list"/>
    <xsl:value-of select="."/>
    <xsl:call-template name="do-end-list"/>
  </xsl:for-each>
  <xsl:call-template name="do-end-list"/>
</xsl:template>

<xsl:template match="ref">
  <a class='special'>
    <xsl:attribute name="href">
      <xsl:if test="//*[@id=current()/@xref]">#</xsl:if>
      <xsl:value-of select="@xref"/>
    </xsl:attribute>
    <xsl:apply-templates/>
  </a>
</xsl:template>-->



<!-- ref within omgroups show the structure of the text, right now we ignore them -->
<xsl:template match="ref[parent::omgroup]"/>


<!-- #################### Text Elements ##################### -->


<xsl:template match="mc">
  <xsl:apply-templates select="choice"/>
  <xsl:text disable-output-escaping="yes">&amp;</xsl:text>
  <xsl:apply-templates select="hint"/>
  <xsl:text disable-output-escaping="yes">&amp;</xsl:text>
  <xsl:apply-templates select="answer"/>
  <xsl:text>\\\hline&#xA;</xsl:text>
</xsl:template>


<xsl:template match="omlet"><xsl:apply-templates/></xsl:template>

<xsl:template match="ref">
  <xsl:text>(\ref{</xsl:text>
    <xsl:value-of select="@xref"/>
  <xsl:text>})</xsl:text>
</xsl:template>


<!-- here come the changes to omdoc2share.xsl that are specific to TeX-->

<xsl:template name="do-crossref">
  <xsl:param name="uri"/>
  <xsl:param name="print-form"/>
  <xsl:text>\href{</xsl:text>
  <xsl:value-of select='$uri'/>
  <xsl:text>}{</xsl:text>
  <xsl:copy-of select="$print-form"/>
  <xsl:text>} </xsl:text>
</xsl:template>

<xsl:template name="do-print-symbol">
  <xsl:text>{\bf </xsl:text>
  <xsl:value-of select="@name"/>
  <xsl:text>}</xsl:text>
</xsl:template>

<xsl:template name="do-print-variable">
  <xsl:text>{</xsl:text><xsl:value-of select="@name"/><xsl:text>}</xsl:text>
</xsl:template>


<!-- finally, here come the stuff that has to be overdefined by the 
     individual formats, this one is for html -->

<xsl:template name="do-id-label">
  <xsl:text>\label{</xsl:text><xsl:value-of select="@id"/><xsl:text>}</xsl:text>
</xsl:template>

<xsl:template match="om:OMOBJ" mode="format">
  <xsl:text>$</xsl:text>
  <xsl:apply-templates/>
  <xsl:text>$</xsl:text>
</xsl:template>

<xsl:template match="om:OMSTR" mode="doit">
  <xsl:text>{\em{</xsl:text><xsl:apply-templates/><xsl:text>}}</xsl:text>
</xsl:template>

<xsl:template match="requation" mode="format">
  <xsl:text>$</xsl:text>
  <xsl:apply-templates select="." mode="inner"/>
  <xsl:text>$</xsl:text>
</xsl:template>

<xsl:template name="do-begin-list">
  <xsl:text>&#xA;\begin{enumerate}&#xA;</xsl:text>
</xsl:template>

<xsl:template name="do-end-list">
  <xsl:text>&#xA;\end{enumerate}&#xA;</xsl:text>
</xsl:template>

<xsl:template name="do-begin-item"><xsl:text>&#xA;\item{}</xsl:text></xsl:template>
<xsl:template name="do-end-item"/>
<xsl:template name="do-begin-bold"><xsl:text>{\bf </xsl:text></xsl:template>
<xsl:template name="do-end-bold"><xsl:text>}</xsl:text></xsl:template>

<xsl:template name="do-begin-crossref"/>
<xsl:template name="do-end-crossref"/>
  <!--<xsl:template name="do-begin-crossref">
  <xsl:param name="uri"/>
  <xsl:text>\href{</xsl:text><xsl:value-of select="$uri"/><xsl:text>}{</xsl:text>
</xsl:template>
<xsl:template name="do-end-crossref"><xsl:text>}</xsl:text></xsl:template>-->

<xsl:template name="do-nl"><xsl:text>\par{}&#xA;</xsl:text></xsl:template>


<xsl:template name="do-begin-math"><xsl:text>\(</xsl:text></xsl:template>
<xsl:template name="do-end-math"><xsl:text>\)</xsl:text></xsl:template>

<xsl:template name="do-begin-omdocenv">
  <xsl:text>&#xA;\begin{omdocenv}{</xsl:text>
  <xsl:value-of select="local-name()"/>
  <xsl:text>}&#xA;</xsl:text>
</xsl:template>

<xsl:template name="do-end-omdocenv">
  <xsl:text>\end{omdocenv}</xsl:text>
</xsl:template>

<xsl:template name="do-begin-mcgroup">
    <xsl:text>\begin{center}\begin{tabular}{|l|l|l|}\hline&#xA;</xsl:text>
</xsl:template>

<xsl:template name="do-end-mcgroup">
  <xsl:text>\end{tabular}&#xA;\end{center}&#xA;</xsl:text>
</xsl:template>

<xsl:template name="safe">
  <xsl:param name="string"/>
  <xsl:value-of disable-output-escaping="yes" select="translate($string,'_&amp;','- ')"/>
</xsl:template>



</xsl:stylesheet>
